/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'antlr'
    id 'jacoco'
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.9.2"
    
    implementation 'org.tinylog:tinylog-api:2.4.0-M1'
    implementation 'org.tinylog:tinylog-impl:2.4.0-M1'

    implementation( 'org.jline:jline-terminal:3.20.0') {
        because 'we want the REPL to have command line histry'
    }
    implementation('org.jline:jline-reader:3.20.0') {
        because 'we want the REPL to have command line histry'
    }
    implementation('org.jline:jline-terminal-jansi:3.20.0') {
        because "jline doesn't work on Windows with this"
    }
    
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testImplementation 'com.github.stefanbirkner:system-lambda:1.2.0'
    testImplementation  'org.hamcrest:hamcrest:2.2'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += [  "-visitor", 
                    "-listener",
                    "-long-messages",
                    "-package", "net.cargal.littlecalc",
                    "-lib", "src/main/antlr/net/cargal/littlecalc"
                ]
}

application {
    // Define the main class for the application.
    mainClass = 'net.cargal.littlecalc.LittleCalc'
}

task(smokeTest, dependsOn: 'classes', type: JavaExec) {
    main = 'net.cargal.littlecalc.LittleCalcSmokeTest'
    classpath = sourceSets.main.runtimeClasspath
}

task(repl, dependsOn: 'classes', type: JavaExec) {
    main = 'net.cargal.littlecalc.LittleCalcRepl'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

jacoco {
    toolVersion = "0.8.7"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        csv.enabled false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
        afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it)
            .filter({file -> !file.path.contains('LittleCalcLexer')})
            .filter({file -> !file.path.contains('LittleCalcParser')})
            .filter({file -> !file.path.contains('LittleCalcBaseListener')})
            .filter({file -> !file.path.contains('LittleCalcListener')})
            .filter({file -> !file.path.contains('LittleCalcVisitor')})
            .filter({file -> !file.path.contains('LittleCalcBaseVisitor')})
        }))
    }

}

